FROM docker.io/bitnami/minideb:buster as target
LABEL maintainer "Bitnami <containers@bitnami.com>"

ENV BITNAMI_PKG_CHMOD="-R g+rwX" \
    HOME="/" \
    OS_ARCH="amd64" \
    OS_FLAVOUR="debian-10" \
    OS_NAME="linux"

COPY prebuildfs /
# Install required system packages and dependencies
RUN install_packages ca-certificates curl libbsd0 libc6 libedit2 libffi6 libgcc1 libgmp10 libgnutls30 libhogweed4 libicu63 libidn2-0 libldap-2.4-2 liblzma5 libnettle6 libp11-kit0 libsasl2-2 libsqlite3-0 libssl1.1 libstdc++6 libtasn1-6 libtinfo6 libunistring2 libuuid1 libxml2 libxslt1.1 locales procps sudo unzip zlib1g
RUN . /opt/bitnami/scripts/libcomponent.sh && component_unpack "postgresql" "9.6.17-2" --checksum 53dccdc37bb8be6d90b6f9d7b774c03dbbde9094c158af028bbd111dda885720
RUN . /opt/bitnami/scripts/libcomponent.sh && component_unpack "gosu" "1.11.0-3" --checksum c18bb8bcc95aa2494793ed5a506c4d03acc82c8c60ad061d5702e0b4048f0cb1
RUN apt-get update && apt-get upgrade -y && \
    rm -r /var/lib/apt/lists /var/cache/apt/archives
RUN update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX && \
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales
RUN echo 'en_GB.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen
RUN echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen

COPY rootfs /
RUN /opt/bitnami/scripts/postgresql/postunpack.sh
ENV BITNAMI_APP_NAME="postgresql" \
    BITNAMI_IMAGE_VERSION="9.6.17-debian-10-r62" \
    LANG="en_US.UTF-8" \
    LANGUAGE="en_US:en" \
    NAMI_PREFIX="/.nami" \
    NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so" \
    PATH="/opt/bitnami/postgresql/bin:/opt/bitnami/common/bin:$PATH"

VOLUME [ "/bitnami/postgresql", "/docker-entrypoint-initdb.d", "/docker-entrypoint-preinitdb.d" ]

EXPOSE 5432

USER 1001
ENTRYPOINT [ "/opt/bitnami/scripts/postgresql/entrypoint.sh" ]
CMD [ "/opt/bitnami/scripts/postgresql/run.sh" ]

FROM centos:7 as df-runtime

RUN yum -y update; yum -y install curl
RUN cd /etc/yum.repos.d && curl -LO https://repo.deepfactor.io/repo/yum/deepfactor.repo
RUN rpm --import https://repo.deepfactor.io/repo/yum/keys/D5DC8225.asc
RUN yum -y install deepfactor-runtime-1.0-459

ARG DF_APP_NAME
ARG DF_COMPONENT
ARG DF_API_TOKEN

# option: pass via build ARG or set here
ENV DF_APP "${DF_APP_NAME}"
ENV DF_COMPONENT "${DF_COMPONENT}"
ENV DF_API_TOKEN "${DF_API_TOKEN}"

RUN if [ "${DF_API_TOKEN}" = "<no value>" ]; then \
    echo "Environment variable DF_API_TOKEN must be specified. Exiting."; \
    exit 41; \
    fi

# If necessary, add --add-host=my-df-portal:10.0.0.1 to your image build AND run commands for DF portal DNS:
RUN dfctl register -a "$DF_APP" -c "$DF_COMPONENT" -o /usr/lib/libdf.so -v
# option: dfctl register/create individual components in container

# Warning: The above df-runtime container's built libdf.so install must match
#  the version of the target container's libc.so.
#  i.e. APP_IMAGE must contain a glibc >= 2.17
FROM target
COPY --from=df-runtime /usr/lib/libdf.so /usr/lib/libdf.so


# The following is an optional smoke test for redhat and debian distro types.
RUN env LD_PRELOAD=/usr/lib/libdf.so sh -c 'rpm -q glibc || dpkg -l libc6' || \
    (echo -e "\n\n\nError, DeepFactor dependency not met.\n\n\n/tmp/deepfactor.log:\n" \
    && cat /tmp/deepfactor.log && false)

# option: set LD_PRELOAD in app startup cmd or script
ENV LD_PRELOAD=/usr/lib/libdf.so
